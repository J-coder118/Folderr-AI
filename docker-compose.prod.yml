version: '3.8'

services:
  web:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    expose:
      - 8000
    env_file:
      - ./.env.prod
    # depends_on:
    #   - db
  # db:
  #   image: postgres:14.3-alpine
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data/
  #   env_file:
  #     - ./.env.prod.db
  
  # MQ BROKER (RabbitMQ)
  rabbitmq:
    container_name: folderr_rabbitmq
    image: rabbitmq:3-management
    env_file:
      - ./.env.prod
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/guest@guest
    ports:
      - "5672:5672"
      - "15672:15672"
      - "33054:33054"
  
  # WORKER (Celery)
  worker:
    container_name: folderr_celery
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    command: celery -A backend worker
    volumes:
      - ./app/:/usr/src/app/
    env_file:
      - ./.env.prod
    depends_on:
      - rabbitmq
  
  nginx:
    build: ./nginx
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    depends_on:
      - web
  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot


volumes:
  # postgres_data:
  static_volume:
  media_volume:
  rabbitmq_data: