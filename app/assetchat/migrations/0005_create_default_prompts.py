# Generated by Django 4.0.10 on 2023-08-14 21:13

from django.db import migrations

default_question_generator_prompt = """
Combine the chat history and follow up question into
a standalone question.

Chat history: {chat_history}

Follow up question: {question}
"""

default_question_answering_prompt = """
A user will upload documents to a web app called Folderr.

Folderr will parse those documents and provide you with the data.

You will play the role of a helpful assistant who will answer the user's questions about
the data that has been provided to you.

If you're unable to answer the question based on the information you've been provided
with, try to infer an answer based on the data provided to you. If it's not possible
to inder an answer, kindly inform the user that you don't have enough information to
answer the question.

If the user's question isn't related to the data you've been provided with, kindly
inform the user that you can only answer questions based on the documents they have
uploaded on Folderr and that they should re-run the AI training process if they're trying
to answer a question based on recently uploaded documents.

Here is the data from the documents:

Data: {context}

And, here is the user's question:

Question: {question}

Provide your answer in markdown format.
"""


def up(apps, schema_editor):
    prompt_model = apps.get_model("assetchat", "Prompt")
    prompt_model.objects.create(
        title="Question gen 1",
        content=default_question_generator_prompt.strip(),
        default=True,
        prompt_type=0,
    )
    prompt_model.objects.create(
        title="Question answering 1",
        content=default_question_answering_prompt.strip(),
        default=True,
        prompt_type=1,
    )


def down(apps, schema_editor):
    prompt_model = apps.get_model("assetchat", "Prompt")
    try:
        prompt = prompt_model.objects.get(default=True, prompt_type=0)
        prompt.delete()
    except prompt_model.DoesNotExist:
        pass
    try:
        prompt = prompt_model.objects.get(default=True, prompt_type=1)
        prompt.delete()
    except prompt_model.DoesNotExist:
        pass


class Migration(migrations.Migration):
    dependencies = [
        ("assetchat", "0004_prompt_prompt_type"),
    ]

    operations = [migrations.RunPython(up, down)]
