"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import environ
from corsheaders.defaults import default_headers
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()

if env.bool("READ_DOT_ENV", True):
    env_file_path = env.str(
        "DOT_ENV_FILE_PATH", str(BASE_DIR / "appconfig.env")
    )
    if not Path(env_file_path).is_file():
        raise ImproperlyConfigured(f"appconfig.env not found in {BASE_DIR}")

    env.read_env(env_file_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-mix*3_=m7(y#a_-$2gb0p_*exgu___cy^%u@*9p82)lf!pef8t"
SECRET_KEY = env.str("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False#env.bool("DJANGO_DEBUG")

TEST = env.bool("DJANGO_TEST", False)

DOMAIN_NAME = env.str("DJANGO_DOMAIN_NAME", "localhost:8000")

# ALLOWED_HOSTS = ["54.83.144.151", "localhost", "localhost:3000"]
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", [])

# Application definition

DJANGO_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
]

THIRD_PARTY_APPS = [
    "corsheaders",
    "rest_framework",
    "django_extensions",
    "ckeditor",
    "ckeditor_uploader",
    "djstripe",
    "recurrence",
    "colorfield",
    "phonenumber_field",
    "debug_toolbar"
]

if DEBUG or TEST:
    THIRD_PARTY_APPS += [
        "whitenoise.runserver_nostatic",
    ]

if not DEBUG and not TEST:
    THIRD_PARTY_APPS += ["storages"]

LOCAL_APPS = [
    "core",
    "api",
    "filemanager",
    "expenses",
    "realestate",
    "help",
    "payments",
    "sunrun",
    "assetchat",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

AUTH_USER_MODEL = "core.User"

SITE_ID = 1

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware"
]

ROOT_URLCONF = "backend.urls"

CSRF_TRUSTED_ORIGINS = env.list("DJANGO_CSRF_TRUSTED_ORIGINS", [])

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

POSTGRES_DB_NAME = env.str("POSTGRES_DB")
POSTGRES_USER = env.str("POSTGRES_USER")
POSTGRES_PASSWORD = env.str("POSTGRES_PASSWORD")
POSTGRES_HOST = env.str("POSTGRES_HOST")
POSTGRES_PORT = env.str("POSTGRES_PORT")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB_NAME,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
        "ATOMIC_REQUESTS": True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Directory where uploaded media is saved.
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"  # Public URL at the browser

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django Rest Framework and JWT and CORS

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DATE_FORMAT": "%m/%d/%Y",
    "DATE_INPUT_FORMATS": ["%m/%d/%Y"],
}

# SIMPLE_JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": env.str("DJANGO_SECRET_KEY"),
}

# CELERY
CELERY_RESULT_BACKEND = "redis://"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# EMAIL

DEFAULT_FROM_EMAIL = SERVER_EMAIL = env.str("DJANGO_DEFAULT_FROM_EMAIL")
ADMINS = [("Josh", "michael@confuzeus.com")]
EMAIL_RECIPIENT_LIST = env.list("DJANGO_EMAIL_RECIPIENT_LIST", [])

if DEBUG or TEST:
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = env.str("DJANGO_SMTP_HOST", "localhost")
    EMAIL_PORT = env.int("DJANGO_SMTP_PORT", 1025)
    EMAIL_HOST_USER = env.str("DJANGO_EMAIL_HOST_USER", None)
    EMAIL_HOST_PASSWORD = env.str("DJANGO_EMAIL_HOST_PASSWORD", None)
    EMAIL_USE_TLS = env.bool("DJANGO_EMAIL_USE_TLS", False)
else:
    EMAIL_BACKEND = "anymail.backends.amazon_ses.EmailBackend"
    ANYMAIL = {
        "AMAZON_SES_CLIENT_PARAMS": {
            # example: override normal Boto credentials specifically for Anymail
            "aws_access_key_id": os.getenv("AWS_SES_ACCESS_KEY_ID"),
            "aws_secret_access_key": os.getenv("AWS_SES_SECRET_ACCESS_KEY"),
            "region_name": "us-east-1",
            # override other default options
            "config": {
                "connect_timeout": 30,
                "read_timeout": 30,
            },
        },
    }
# AWS
if not DEBUG:
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_QUERYSTRING_AUTH = False
AWS_S3_ACCESS_KEY_ID = env.str("AWS_S3_ACCESS_KEY_ID")
AWS_S3_SECRET_ACCESS_KEY = env.str("AWS_S3_SECRET_ACCESS_KEY")
AWS_SNS_ACCESS_KEY_ID = env.str("AWS_SNS_ACCESS_KEY_ID")
AWS_SNS_SECRET_ACCESS_KEY = env.str("AWS_SNS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
AWS_S3_REGION_NAME = env.str("AWS_S3_REGION_NAME", "us-east-1")
AWS_SNS_REGION_NAME = env.str("AWS_SNS_REGION_NAME", "us-east-1")
AWS_URL_EXPIRATION = env.int("AWS_URL_EXPIRATION")

# # SIWA
# SIWA_CLIENT_ID = env.str("SIWA_CLIENT_ID")

# SIWA_IOS_CLIENT_ID = env.str("SIWA_IOS_CLIENT_ID")

# SIWA_PKEY_PATH = Path(env.str("SIWA_PKEY_PATH", str(BASE_DIR / ".siwa_pkey")))

# if not SIWA_PKEY_PATH.exists():
#     raise ImproperlyConfigured(
#         f"SIWA private key not found at {SIWA_PKEY_PATH}"
#     )

# SIWA_PKEY_ID = env.str("SIWA_PKEY_ID")

# APPLE_TEAM_ID = env.str("APPLE_TEAM_ID")

# SIWA_REDIRECT_URI = env.str("SIWA_REDIRECT_URI")

# Real estate
ZILLOW_SEARCH_API_URL = "https://zillow56.p.rapidapi.com/search"

ZILLOW_PROPERTY_DETAILS_API_URL = "https://zillow56.p.rapidapi.com/property"

RAPID_API_KEY = env.str("RAPID_API_KEY")

ZILLOW_RAPID_API_HOST = env.str("ZILLOW_RAPID_API_HOST")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s "
            "%(process)d %(thread)d %(message)s"
        }
    },
    "filters": {
        "require_debug_false": {"()": "django.utils.log.RequireDebugFalse"}
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "mail_admins": {
            "level": "ERROR",
            "filters": ["require_debug_false"],
            "class": "django.utils.log.AdminEmailHandler",
        },
    },
    "root": {"level": "DEBUG", "handlers": ["console"]},
}

if not DEBUG:
    LOGGING.update(
        {
            "root": {"level": "INFO", "handlers": ["console"]},
            "loggers": {
                "django.request": {
                    "handlers": ["mail_admins"],
                    "level": "ERROR",
                    "propagate": True,
                },
                "django.security.DisallowedHost": {
                    "level": "ERROR",
                    "handlers": ["console", "mail_admins"],
                    "propagate": True,
                },
            },
        },
    )

# Communications

FOLDER_EMAIL_DOMAIN = env.str("DJANGO_FOLDER_EMAIL_DOMAIN")

FOLDER_EMAIL_S3_BUCKET = env.str("DJANGO_FOLDER_EMAIL_S3_BUCKET")

FODLER_EMAIL_SNS_TOPIC_ARN = env.str("DJANGO_FOLDER_EMAIL_SNS_TOPIC_ARN")

FOLDER_EMAIL_MAX_LENGTH = 50_000_000

# Ckeditor

CKEDITOR_UPLOAD_PATH = "ck-uploads/"

CKEDITOR_IMAGE_BACKEND = "ckeditor_uploader.backends.PillowBackend"

CKEDITOR_CONFIGS = {
    "default": {
        "skin": "moono",
        # 'skin': 'office2013',
        "toolbar_Basic": [["Source", "-", "Bold", "Italic"]],
        "toolbar_YourCustomToolbarConfig": [
            {
                "name": "document",
                "items": [
                    "Source",
                    "-",
                    "Save",
                    "NewPage",
                    "Preview",
                    "Print",
                    "-",
                    "Templates",
                ],
            },
            {
                "name": "clipboard",
                "items": [
                    "Cut",
                    "Copy",
                    "Paste",
                    "PasteText",
                    "PasteFromWord",
                    "-",
                    "Undo",
                    "Redo",
                ],
            },
            {
                "name": "editing",
                "items": ["Find", "Replace", "-", "SelectAll"],
            },
            "/",
            {
                "name": "basicstyles",
                "items": [
                    "Bold",
                    "Italic",
                    "Underline",
                    "Strike",
                    "Subscript",
                    "Superscript",
                    "-",
                    "RemoveFormat",
                ],
            },
            {
                "name": "paragraph",
                "items": [
                    "NumberedList",
                    "BulletedList",
                    "-",
                    "Outdent",
                    "Indent",
                    "-",
                    "Blockquote",
                    "CreateDiv",
                    "-",
                    "JustifyLeft",
                    "JustifyCenter",
                    "JustifyRight",
                    "JustifyBlock",
                ],
            },
            {"name": "links", "items": ["Link", "Unlink", "Anchor"]},
            {
                "name": "insert",
                "items": [
                    "Table",
                    "HorizontalRule",
                    "Smiley",
                    "SpecialChar",
                    "PageBreak",
                    "Iframe",
                ],
            },
            "/",
            {
                "name": "styles",
                "items": ["Styles", "Format", "Font", "FontSize"],
            },
            {"name": "colors", "items": ["TextColor", "BGColor"]},
            {"name": "tools", "items": ["Maximize", "ShowBlocks"]},
            {"name": "about", "items": ["About"]},
            "/",  # put this to force next toolbar on new line
            {
                "name": "yourcustomtools",
                "items": [
                    # put the name of your editor.ui.addButton here
                    "Preview",
                    "Maximize",
                ],
            },
        ],
        "toolbar": "YourCustomToolbarConfig",  # put selected toolbar config here
        # 'toolbarGroups': [{ 'name': 'document', 'groups': [ 'mode', 'document', 'doctools' ] }],
        # 'height': 291,
        # 'width': '100%',
        # 'filebrowserWindowHeight': 725,
        # 'filebrowserWindowWidth': 940,
        # 'toolbarCanCollapse': True,
        # 'mathJaxLib': '//cdn.mathjax.org/mathjax/2.2-latest/MathJax.js?config=TeX-AMS_HTML',
        "tabSpaces": 4,
        "extraPlugins": ",".join(
            [
                "uploadimage",  # the upload image feature
                # your extra plugins here
                "div",
                "autolink",
                "autoembed",
                "embedsemantic",
                "autogrow",
                # 'devtools',
                "widget",
                "lineutils",
                "clipboard",
                "dialog",
                "dialogui",
                "elementspath",
                "iframe",
            ]
        ),
    }
}

# Stripe

STRIPE_LIVE_SECRET_KEY = env.str(
    "DJANGO_STRIPE_LIVE_SECRET_KEY", "<your secret key>"
)
STRIPE_TEST_SECRET_KEY = env.str(
    "DJANGO_STRIPE_TEST_SECRET_KEY", "<your secret key>"
)
STRIPE_LIVE_MODE = env.bool("DJANGO_STRIPE_LIVE_MODE")
DJSTRIPE_WEBHOOK_SECRET = env.str("DJANGO_STRIPE_WEBHOOK_SECRET")
DJSTRIPE_USE_NATIVE_JSONFIELD = True
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"

FOLDERR_PLUS_SUBSCRIPTION_PRODUCT_ID = env.str(
    "FOLDERR_PLUS_SUBSCRIPTION_PRODUCT_ID"
)

# Recaptcha

RECAPTCHA_SITE_KEY = env.str("RECAPTCHA_SITE_KEY")
RECAPTCHA_SECRET_KEY = env.str("RECAPTCHA_SECRET_KEY")

# Revenue cat

REVENUE_CAT_SECRET_KEY = env.str("REVENUE_CAT_SECRET_KEY")

REVENUE_CAT_PUBLIC_KEY_IOS = env.str("REVENUE_CAT_PUBLIC_KEY_IOS")

IMAGE_QUALITY_API_USER = env.str("IMAGE_QUALITY_API_USER")
IMAGE_QUALITY_API_SECRET = env.str("IMAGE_QUALITY_API_SECRET")

REFRESH_TOKEN_COOKIE_NAME = "refresh_token"

if DEBUG or TEST:
    REFRESH_TOKEN_COOKIE_DOMAIN = "localhost"
else:
    REFRESH_TOKEN_COOKIE_DOMAIN = "folderr.com"

REFRESH_TOKEN_COOKIE_SAMESITE = "Lax"

COOKIE_BYPASS_TOKEN = env.str("COOKIE_BYPASS_TOKEN")

CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    "baggage",
    "sentry-trace",
]
CORS_ALLOW_CREDENTIALS = True

SUNRUN_ORGANIZATION_PIN = "529562"

FRONT_END_URL = env.str("FRONT_END_URL")

OPENAI_SECRET_KEY = env.str("OPENAI_SECRET_KEY")

# AI usage limits

FREE_USER_MAX_TRAINING = 5

PLUS_USER_MAX_TRAINING = 100
